{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Predicting Survivors of the Titanic Shipwreck","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib #visualization\nimport matplotlib.pyplot as plt #visualization\nimport seaborn as sns #visualization\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# For running files through Kaggle\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.422417Z","iopub.execute_input":"2023-10-26T21:34:27.422932Z","iopub.status.idle":"2023-10-26T21:34:27.435686Z","shell.execute_reply.started":"2023-10-26T21:34:27.422895Z","shell.execute_reply":"2023-10-26T21:34:27.434091Z"},"trusted":true},"execution_count":300,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.438522Z","iopub.execute_input":"2023-10-26T21:34:27.439221Z","iopub.status.idle":"2023-10-26T21:34:27.469374Z","shell.execute_reply.started":"2023-10-26T21:34:27.439177Z","shell.execute_reply":"2023-10-26T21:34:27.468072Z"},"trusted":true},"execution_count":301,"outputs":[{"execution_count":301,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Notes:\n- Survived -- 1 if yes\n- Pclass -- 1 if first class, 2 if second class, 3 if 3rd class. \n- SibSp -- # of siblings/spouces on Titanic\n- Parch -- # of parents/children on Titanic\n- Embarked -- Port from which they departed, C = Cherbourg, Q = Queenstown, S = Southampton","metadata":{}},{"cell_type":"code","source":"train_df.describe()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.471133Z","iopub.execute_input":"2023-10-26T21:34:27.471452Z","iopub.status.idle":"2023-10-26T21:34:27.508073Z","shell.execute_reply.started":"2023-10-26T21:34:27.471425Z","shell.execute_reply":"2023-10-26T21:34:27.506928Z"},"trusted":true},"execution_count":302,"outputs":[{"execution_count":302,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Notes:\n- There are 891 passengers' data in the training set.\n- The mean age of passenger was 29.6 (so about 30 years old).\n- Only about 38% of people from the training set survived the Titanic.","metadata":{}},{"cell_type":"code","source":"train_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.511455Z","iopub.execute_input":"2023-10-26T21:34:27.511808Z","iopub.status.idle":"2023-10-26T21:34:27.522494Z","shell.execute_reply.started":"2023-10-26T21:34:27.511777Z","shell.execute_reply":"2023-10-26T21:34:27.520658Z"},"trusted":true},"execution_count":303,"outputs":[{"execution_count":303,"output_type":"execute_result","data":{"text/plain":"PassengerId      int64\nSurvived         int64\nPclass           int64\nName            object\nSex             object\nAge            float64\nSibSp            int64\nParch            int64\nTicket          object\nFare           float64\nCabin           object\nEmbarked        object\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Deleting Unnecessary Columns/Features**","metadata":{}},{"cell_type":"markdown","source":"Goal: predict which passengers survived/didn't survive by determining which factors affected survival rate.\nPredictability of each column:\n\n- PassengerId -- DELETE -- ID type features won't predict whether the passenger survived or not, since it is just a way to label the passenger.\n- Survived -- KEEP -- this is what we're predicting.      \n- Pclass -- KEEP -- they may have prioritized people who had better seats (people who paid more).    \n- Name -- DELETE -- same reason as PassengerId.\n- Sex -- KEEP -- they may have prioritized women.\n- Age -- KEEP -- they may have prioritized children.\n- SibSp -- KEEP -- they may have saved families at once.\n- Parch -- KEEP -- they may have saved families at once.\n- Ticket -- DELETE -- same reason as PassengerId.\n- Fare -- KEEP -- they may have prioritized people who paid more.    \n- Cabin -- KEEP -- they may have prioritized people who were in cabins, and they may have prioritized cabins that were closer to the lifeboats.","metadata":{}},{"cell_type":"code","source":"train_df = train_df.drop([\"PassengerId\", \"Name\", \"Ticket\"], axis=1)\ntrain_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.524269Z","iopub.execute_input":"2023-10-26T21:34:27.524616Z","iopub.status.idle":"2023-10-26T21:34:27.552820Z","shell.execute_reply.started":"2023-10-26T21:34:27.524587Z","shell.execute_reply":"2023-10-26T21:34:27.551328Z"},"trusted":true},"execution_count":304,"outputs":[{"execution_count":304,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked\n0           0       3    male  22.0      1      0   7.2500   NaN        S\n1           1       1  female  38.0      1      0  71.2833   C85        C\n2           1       3  female  26.0      0      0   7.9250   NaN        S\n3           1       1  female  35.0      1      0  53.1000  C123        S\n4           0       3    male  35.0      0      0   8.0500   NaN        S\n..        ...     ...     ...   ...    ...    ...      ...   ...      ...\n886         0       2    male  27.0      0      0  13.0000   NaN        S\n887         1       1  female  19.0      0      0  30.0000   B42        S\n888         0       3  female   NaN      1      2  23.4500   NaN        S\n889         1       1    male  26.0      0      0  30.0000  C148        C\n890         0       3    male  32.0      0      0   7.7500   NaN        Q\n\n[891 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Missing Analysis**","metadata":{}},{"cell_type":"markdown","source":"First, check if dataset has any duplicates: it didn't.","metadata":{}},{"cell_type":"code","source":"print(f'Duplicates in train set: {train_df.duplicated().sum()}, ({np.round(100*train_df.duplicated().sum()/len(train_df),1)}%)')","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.554868Z","iopub.execute_input":"2023-10-26T21:34:27.555285Z","iopub.status.idle":"2023-10-26T21:34:27.573320Z","shell.execute_reply.started":"2023-10-26T21:34:27.555253Z","shell.execute_reply":"2023-10-26T21:34:27.572332Z"},"trusted":true},"execution_count":305,"outputs":[{"name":"stdout","text":"Duplicates in train set: 107, (12.0%)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df[pd.isnull(train_df).any(axis=1)].shape[0] / len(train_df) * 100","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.574928Z","iopub.execute_input":"2023-10-26T21:34:27.575329Z","iopub.status.idle":"2023-10-26T21:34:27.589482Z","shell.execute_reply.started":"2023-10-26T21:34:27.575298Z","shell.execute_reply":"2023-10-26T21:34:27.588048Z"},"trusted":true},"execution_count":306,"outputs":[{"execution_count":306,"output_type":"execute_result","data":{"text/plain":"79.46127946127946"},"metadata":{}}]},{"cell_type":"code","source":"train_df[pd.isnull(train_df).any(axis=1)]","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.591994Z","iopub.execute_input":"2023-10-26T21:34:27.592523Z","iopub.status.idle":"2023-10-26T21:34:27.621306Z","shell.execute_reply.started":"2023-10-26T21:34:27.592482Z","shell.execute_reply":"2023-10-26T21:34:27.620009Z"},"trusted":true},"execution_count":307,"outputs":[{"execution_count":307,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked\n0           0       3    male  22.0      1      0   7.2500   NaN        S\n2           1       3  female  26.0      0      0   7.9250   NaN        S\n4           0       3    male  35.0      0      0   8.0500   NaN        S\n5           0       3    male   NaN      0      0   8.4583   NaN        Q\n7           0       3    male   2.0      3      1  21.0750   NaN        S\n..        ...     ...     ...   ...    ...    ...      ...   ...      ...\n884         0       3    male  25.0      0      0   7.0500   NaN        S\n885         0       3  female  39.0      0      5  29.1250   NaN        Q\n886         0       2    male  27.0      0      0  13.0000   NaN        S\n888         0       3  female   NaN      1      2  23.4500   NaN        S\n890         0       3    male  32.0      0      0   7.7500   NaN        Q\n\n[708 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>884</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>25.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>885</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>29.1250</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>708 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"79% of rows have at least one column missing. However, they are missing the same Cabin column. \nIs there a pattern in which entries are missing Cabin information?\n- theory: The PClass are all either 2 or 3","metadata":{}},{"cell_type":"code","source":"len(train_df[(train_df[\"Pclass\"] == 2) | (train_df[\"Pclass\"] == 3) & pd.isnull(train_df[\"Cabin\"])])\n#number of rows where the Cabin is missing and the Pclass is 2 or 3","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.622848Z","iopub.execute_input":"2023-10-26T21:34:27.623220Z","iopub.status.idle":"2023-10-26T21:34:27.634514Z","shell.execute_reply.started":"2023-10-26T21:34:27.623190Z","shell.execute_reply":"2023-10-26T21:34:27.632957Z"},"trusted":true},"execution_count":308,"outputs":[{"execution_count":308,"output_type":"execute_result","data":{"text/plain":"663"},"metadata":{}}]},{"cell_type":"code","source":"len(train_df[(train_df[\"Pclass\"] == 1) & pd.isnull(train_df[\"Cabin\"])])\n#number of rows where the Cabin is missing and the Pclass is 1","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.640187Z","iopub.execute_input":"2023-10-26T21:34:27.640558Z","iopub.status.idle":"2023-10-26T21:34:27.656845Z","shell.execute_reply.started":"2023-10-26T21:34:27.640528Z","shell.execute_reply":"2023-10-26T21:34:27.655422Z"},"trusted":true},"execution_count":309,"outputs":[{"execution_count":309,"output_type":"execute_result","data":{"text/plain":"40"},"metadata":{}}]},{"cell_type":"markdown","source":"This theory was mostly correct. There are only 40 passengers in first class where the Cabin number is NaN. Therefore, we can conclude that cabins are mostly for first class users. Let's see if any other data is missing by making a copy of the dataset but without the missing cabin info:","metadata":{}},{"cell_type":"code","source":"train_df_copy = train_df\ntrain_df_copy = train_df_copy.drop([\"Cabin\"], axis=1)\ntrain_df_copy[pd.isnull(train_df_copy).any(axis=1)]","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.658361Z","iopub.execute_input":"2023-10-26T21:34:27.658750Z","iopub.status.idle":"2023-10-26T21:34:27.689573Z","shell.execute_reply.started":"2023-10-26T21:34:27.658720Z","shell.execute_reply":"2023-10-26T21:34:27.688154Z"},"trusted":true},"execution_count":310,"outputs":[{"execution_count":310,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex  Age  SibSp  Parch     Fare Embarked\n5           0       3    male  NaN      0      0   8.4583        Q\n17          1       2    male  NaN      0      0  13.0000        S\n19          1       3  female  NaN      0      0   7.2250        C\n26          0       3    male  NaN      0      0   7.2250        C\n28          1       3  female  NaN      0      0   7.8792        Q\n..        ...     ...     ...  ...    ...    ...      ...      ...\n859         0       3    male  NaN      0      0   7.2292        C\n863         0       3  female  NaN      8      2  69.5500        S\n868         0       3    male  NaN      0      0   9.5000        S\n878         0       3    male  NaN      0      0   7.8958        S\n888         0       3  female  NaN      1      2  23.4500        S\n\n[179 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.4583</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1</td>\n      <td>2</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2250</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2250</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8792</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>859</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.2292</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>863</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>8</td>\n      <td>2</td>\n      <td>69.5500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.5000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>878</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8958</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n<p>179 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Some people's ages are missing. Are their ages missing because they didn't survive so not much information was found about them?","metadata":{}},{"cell_type":"code","source":"no_survive_nan_age = train_df_copy[(train_df_copy[\"Survived\"] == 0) & (pd.isnull(train_df_copy[\"Age\"]))]\nnan_age = train_df_copy[pd.isnull(train_df_copy[\"Age\"])]\nlen(no_survive_nan_age)/len(nan_age) * 100","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.692169Z","iopub.execute_input":"2023-10-26T21:34:27.692636Z","iopub.status.idle":"2023-10-26T21:34:27.707708Z","shell.execute_reply.started":"2023-10-26T21:34:27.692593Z","shell.execute_reply":"2023-10-26T21:34:27.706782Z"},"trusted":true},"execution_count":311,"outputs":[{"execution_count":311,"output_type":"execute_result","data":{"text/plain":"70.62146892655367"},"metadata":{}}]},{"cell_type":"markdown","source":"Since 70% of people who have no age data are people that didn't survive, it may be the case that they couldn't find their age information since they were not found.","metadata":{}},{"cell_type":"markdown","source":"# **EDA**","metadata":{}},{"cell_type":"markdown","source":"Goal: predict which passengers survived/didn't survive by determining which factors affected survival rate.\nRecap of columns:\n\n- Pclass -- they may have prioritized people who had better seats (people who paid more).    \n- Sex -- they may have prioritized women.\n- Age -- they may have prioritized children.\n- SibSp -- they may have saved families at once.\n- Parch -- they may have saved families at once.\n- Fare -- they may have prioritized people who paid more.    \n- Cabin -- they may have prioritized people who were in certain cabins.\n","metadata":{"execution":{"iopub.status.busy":"2023-08-21T10:27:54.376355Z","iopub.execute_input":"2023-08-21T10:27:54.376756Z","iopub.status.idle":"2023-08-21T10:27:54.385746Z","shell.execute_reply.started":"2023-08-21T10:27:54.376726Z","shell.execute_reply":"2023-08-21T10:27:54.384354Z"}}},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.708737Z","iopub.execute_input":"2023-10-26T21:34:27.709097Z","iopub.status.idle":"2023-10-26T21:34:27.730443Z","shell.execute_reply.started":"2023-10-26T21:34:27.709067Z","shell.execute_reply":"2023-10-26T21:34:27.729593Z"},"trusted":true},"execution_count":312,"outputs":[{"execution_count":312,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked\n0         0       3    male  22.0      1      0   7.2500   NaN        S\n1         1       1  female  38.0      1      0  71.2833   C85        C\n2         1       3  female  26.0      0      0   7.9250   NaN        S\n3         1       1  female  35.0      1      0  53.1000  C123        S\n4         0       3    male  35.0      0      0   8.0500   NaN        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Class vs Survival ###","metadata":{}},{"cell_type":"code","source":"class_df = train_df.groupby(\"Pclass\").mean()\nclass_df = class_df.reset_index()\nclass_df\n#class_df[\"Pclass\"]","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.731876Z","iopub.execute_input":"2023-10-26T21:34:27.732242Z","iopub.status.idle":"2023-10-26T21:34:27.757379Z","shell.execute_reply.started":"2023-10-26T21:34:27.732211Z","shell.execute_reply":"2023-10-26T21:34:27.756259Z"},"trusted":true},"execution_count":313,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/3361663475.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  class_df = train_df.groupby(\"Pclass\").mean()\n","output_type":"stream"},{"execution_count":313,"output_type":"execute_result","data":{"text/plain":"   Pclass  Survived        Age     SibSp     Parch       Fare\n0       1  0.629630  38.233441  0.416667  0.356481  84.154687\n1       2  0.472826  29.877630  0.402174  0.380435  20.662183\n2       3  0.242363  25.140620  0.615071  0.393075  13.675550","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Survived</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.629630</td>\n      <td>38.233441</td>\n      <td>0.416667</td>\n      <td>0.356481</td>\n      <td>84.154687</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0.472826</td>\n      <td>29.877630</td>\n      <td>0.402174</td>\n      <td>0.380435</td>\n      <td>20.662183</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.242363</td>\n      <td>25.140620</td>\n      <td>0.615071</td>\n      <td>0.393075</td>\n      <td>13.675550</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.bar(class_df[\"Pclass\"], class_df[\"Survived\"], label = class_df[\"Survived\"], color = class_df[\"Survived\"])\n#plt.bar(indices, survived_counts, bar_width, label='Survived', color='g')\n#plt.bar(indices, not_survived_counts, bar_width, bottom=survived_counts, label='Did not Survive', color='r')\n\nplt.title(\"Survival by Class\")\nplt.xlabel(\"Class\")\nplt.ylabel(\"Count\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:27.758453Z","iopub.execute_input":"2023-10-26T21:34:27.759242Z","iopub.status.idle":"2023-10-26T21:34:28.066201Z","shell.execute_reply.started":"2023-10-26T21:34:27.759211Z","shell.execute_reply":"2023-10-26T21:34:28.065155Z"},"trusted":true},"execution_count":314,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"We see that **first class users were more likely to survive the titanic shipwreck.** There exists a correlation between class and survival.","metadata":{}},{"cell_type":"markdown","source":"### Sex vs Survival ###","metadata":{}},{"cell_type":"code","source":"sex_df = train_df.groupby(\"Sex\").mean().reset_index()\nsex_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.068064Z","iopub.execute_input":"2023-10-26T21:34:28.068798Z","iopub.status.idle":"2023-10-26T21:34:28.090139Z","shell.execute_reply.started":"2023-10-26T21:34:28.068754Z","shell.execute_reply":"2023-10-26T21:34:28.089055Z"},"trusted":true},"execution_count":315,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/3824035530.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  sex_df = train_df.groupby(\"Sex\").mean().reset_index()\n","output_type":"stream"},{"execution_count":315,"output_type":"execute_result","data":{"text/plain":"      Sex  Survived    Pclass        Age     SibSp     Parch       Fare\n0  female  0.742038  2.159236  27.915709  0.694268  0.649682  44.479818\n1    male  0.188908  2.389948  30.726645  0.429809  0.235702  25.523893","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>0.742038</td>\n      <td>2.159236</td>\n      <td>27.915709</td>\n      <td>0.694268</td>\n      <td>0.649682</td>\n      <td>44.479818</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>male</td>\n      <td>0.188908</td>\n      <td>2.389948</td>\n      <td>30.726645</td>\n      <td>0.429809</td>\n      <td>0.235702</td>\n      <td>25.523893</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.bar(sex_df[\"Sex\"], sex_df[\"Survived\"]) #, label = class_df[\"Survived\"])\n#plt.bar(indices, survived_counts, bar_width, label='Survived', color='g')\n#plt.bar(indices, not_survived_counts, bar_width, bottom=survived_counts, label='Did not Survive', color='r')\n\nplt.title(\"Survival by Sex\")\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Count\")\n#plt.xticks(rotation=0)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.091658Z","iopub.execute_input":"2023-10-26T21:34:28.092090Z","iopub.status.idle":"2023-10-26T21:34:28.357886Z","shell.execute_reply.started":"2023-10-26T21:34:28.092045Z","shell.execute_reply":"2023-10-26T21:34:28.356774Z"},"trusted":true},"execution_count":316,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"We see that female riders were significantly more likely to survive. There exists a correlation between sex and survival rate.","metadata":{}},{"cell_type":"code","source":"train_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.359609Z","iopub.execute_input":"2023-10-26T21:34:28.361034Z","iopub.status.idle":"2023-10-26T21:34:28.383959Z","shell.execute_reply.started":"2023-10-26T21:34:28.360965Z","shell.execute_reply":"2023-10-26T21:34:28.382412Z"},"trusted":true},"execution_count":317,"outputs":[{"execution_count":317,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked\n0           0       3    male  22.0      1      0   7.2500   NaN        S\n1           1       1  female  38.0      1      0  71.2833   C85        C\n2           1       3  female  26.0      0      0   7.9250   NaN        S\n3           1       1  female  35.0      1      0  53.1000  C123        S\n4           0       3    male  35.0      0      0   8.0500   NaN        S\n..        ...     ...     ...   ...    ...    ...      ...   ...      ...\n886         0       2    male  27.0      0      0  13.0000   NaN        S\n887         1       1  female  19.0      0      0  30.0000   B42        S\n888         0       3  female   NaN      1      2  23.4500   NaN        S\n889         1       1    male  26.0      0      0  30.0000  C148        C\n890         0       3    male  32.0      0      0   7.7500   NaN        Q\n\n[891 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Age vs Survival ###","metadata":{}},{"cell_type":"code","source":"train_df[\"Age\"]","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.386046Z","iopub.execute_input":"2023-10-26T21:34:28.386745Z","iopub.status.idle":"2023-10-26T21:34:28.402904Z","shell.execute_reply.started":"2023-10-26T21:34:28.386711Z","shell.execute_reply":"2023-10-26T21:34:28.401716Z"},"trusted":true},"execution_count":318,"outputs":[{"execution_count":318,"output_type":"execute_result","data":{"text/plain":"0      22.0\n1      38.0\n2      26.0\n3      35.0\n4      35.0\n       ... \n886    27.0\n887    19.0\n888     NaN\n889    26.0\n890    32.0\nName: Age, Length: 891, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"bins = []\nfor age in train_df[\"Age\"]:\n    if 0 <= age <= 13:\n        bins.append(\"1. child\")\n    elif 14<= age <= 19:\n        bins.append(\"2. teen\")\n    elif 20<= age <= 30:\n        bins.append(\"3. young\")\n    elif 30<= age <= 40:\n        bins.append(\"4. adult\")\n    elif age >= 60:\n        bins.append(\"5. elder\")\n    else:\n        bins.append(\"NaN\")\n        \nage_df = train_df\nage_df[\"Binned Age\"] = bins","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.404606Z","iopub.execute_input":"2023-10-26T21:34:28.405042Z","iopub.status.idle":"2023-10-26T21:34:28.418566Z","shell.execute_reply.started":"2023-10-26T21:34:28.405003Z","shell.execute_reply":"2023-10-26T21:34:28.417310Z"},"trusted":true},"execution_count":319,"outputs":[]},{"cell_type":"code","source":"age_df = age_df.groupby(\"Binned Age\").mean().reset_index()\nage_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.420048Z","iopub.execute_input":"2023-10-26T21:34:28.420550Z","iopub.status.idle":"2023-10-26T21:34:28.452965Z","shell.execute_reply.started":"2023-10-26T21:34:28.420509Z","shell.execute_reply":"2023-10-26T21:34:28.452177Z"},"trusted":true},"execution_count":320,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/3038647579.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  age_df = age_df.groupby(\"Binned Age\").mean().reset_index()\n","output_type":"stream"},{"execution_count":320,"output_type":"execute_result","data":{"text/plain":"  Binned Age  Survived    Pclass        Age     SibSp     Parch       Fare\n0   1. child  0.591549  2.633803   5.002394  1.816901  1.380282  31.024472\n1    2. teen  0.397849  2.451613  17.306452  0.580645  0.397849  32.382797\n2   3. young  0.355102  2.424490  25.091837  0.314286  0.228571  27.101665\n3   4. adult  0.445161  2.090323  35.051613  0.374194  0.393548  42.496100\n4   5. elder  0.269231  1.538462  65.096154  0.230769  0.307692  43.467950\n5        NaN  0.332226  2.272425  48.125000  0.471761  0.265781  30.307779","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Binned Age</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1. child</td>\n      <td>0.591549</td>\n      <td>2.633803</td>\n      <td>5.002394</td>\n      <td>1.816901</td>\n      <td>1.380282</td>\n      <td>31.024472</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2. teen</td>\n      <td>0.397849</td>\n      <td>2.451613</td>\n      <td>17.306452</td>\n      <td>0.580645</td>\n      <td>0.397849</td>\n      <td>32.382797</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3. young</td>\n      <td>0.355102</td>\n      <td>2.424490</td>\n      <td>25.091837</td>\n      <td>0.314286</td>\n      <td>0.228571</td>\n      <td>27.101665</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4. adult</td>\n      <td>0.445161</td>\n      <td>2.090323</td>\n      <td>35.051613</td>\n      <td>0.374194</td>\n      <td>0.393548</td>\n      <td>42.496100</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5. elder</td>\n      <td>0.269231</td>\n      <td>1.538462</td>\n      <td>65.096154</td>\n      <td>0.230769</td>\n      <td>0.307692</td>\n      <td>43.467950</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>0.332226</td>\n      <td>2.272425</td>\n      <td>48.125000</td>\n      <td>0.471761</td>\n      <td>0.265781</td>\n      <td>30.307779</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.bar(age_df[\"Binned Age\"], age_df[\"Survived\"])\n\nplt.title(\"Survival by Age\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\n#plt.xticks(rotation=0)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.454141Z","iopub.execute_input":"2023-10-26T21:34:28.455165Z","iopub.status.idle":"2023-10-26T21:34:28.731337Z","shell.execute_reply.started":"2023-10-26T21:34:28.455132Z","shell.execute_reply":"2023-10-26T21:34:28.730151Z"},"trusted":true},"execution_count":321,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Children seem to be saved the most. Other than that, there doesn't seem to be a significant difference between the other ages.","metadata":{}},{"cell_type":"markdown","source":"### Size of Family vs Survival ###","metadata":{}},{"cell_type":"code","source":"sibsp_df = train_df.groupby(\"SibSp\").mean().reset_index()\nsibsp_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.733013Z","iopub.execute_input":"2023-10-26T21:34:28.733803Z","iopub.status.idle":"2023-10-26T21:34:28.752386Z","shell.execute_reply.started":"2023-10-26T21:34:28.733760Z","shell.execute_reply":"2023-10-26T21:34:28.751381Z"},"trusted":true},"execution_count":322,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2466220869.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  sibsp_df = train_df.groupby(\"SibSp\").mean().reset_index()\n","output_type":"stream"},{"execution_count":322,"output_type":"execute_result","data":{"text/plain":"   SibSp  Survived    Pclass        Age     Parch       Fare\n0      0  0.345395  2.351974  31.397558  0.185855  25.692028\n1      1  0.535885  2.057416  30.089727  0.655502  44.147370\n2      2  0.464286  2.357143  22.620000  0.642857  51.753718\n3      3  0.250000  2.562500  13.916667  1.312500  68.908862\n4      4  0.166667  3.000000   7.055556  1.500000  31.855556\n5      5  0.000000  3.000000  10.200000  2.000000  46.900000\n6      8  0.000000  3.000000        NaN  2.000000  69.550000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SibSp</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.345395</td>\n      <td>2.351974</td>\n      <td>31.397558</td>\n      <td>0.185855</td>\n      <td>25.692028</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.535885</td>\n      <td>2.057416</td>\n      <td>30.089727</td>\n      <td>0.655502</td>\n      <td>44.147370</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.464286</td>\n      <td>2.357143</td>\n      <td>22.620000</td>\n      <td>0.642857</td>\n      <td>51.753718</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.250000</td>\n      <td>2.562500</td>\n      <td>13.916667</td>\n      <td>1.312500</td>\n      <td>68.908862</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.166667</td>\n      <td>3.000000</td>\n      <td>7.055556</td>\n      <td>1.500000</td>\n      <td>31.855556</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>10.200000</td>\n      <td>2.000000</td>\n      <td>46.900000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>NaN</td>\n      <td>2.000000</td>\n      <td>69.550000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"parch_df = train_df.groupby(\"Parch\").mean().reset_index()\nparch_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.753905Z","iopub.execute_input":"2023-10-26T21:34:28.754262Z","iopub.status.idle":"2023-10-26T21:34:28.776236Z","shell.execute_reply.started":"2023-10-26T21:34:28.754232Z","shell.execute_reply":"2023-10-26T21:34:28.775033Z"},"trusted":true},"execution_count":323,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/1047488504.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  parch_df = train_df.groupby(\"Parch\").mean().reset_index()\n","output_type":"stream"},{"execution_count":323,"output_type":"execute_result","data":{"text/plain":"   Parch  Survived    Pclass        Age     SibSp       Fare\n0      0  0.343658  2.321534  32.178503  0.237463  25.586774\n1      1  0.550847  2.203390  24.422000  1.084746  46.778180\n2      2  0.500000  2.275000  17.216912  2.062500  64.337604\n3      3  0.600000  2.600000  33.200000  1.000000  25.951660\n4      4  0.000000  2.500000  44.500000  0.750000  84.968750\n5      5  0.200000  3.000000  39.200000  0.600000  32.550000\n6      6  0.000000  3.000000  43.000000  1.000000  46.900000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Parch</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.343658</td>\n      <td>2.321534</td>\n      <td>32.178503</td>\n      <td>0.237463</td>\n      <td>25.586774</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.550847</td>\n      <td>2.203390</td>\n      <td>24.422000</td>\n      <td>1.084746</td>\n      <td>46.778180</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.500000</td>\n      <td>2.275000</td>\n      <td>17.216912</td>\n      <td>2.062500</td>\n      <td>64.337604</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.600000</td>\n      <td>2.600000</td>\n      <td>33.200000</td>\n      <td>1.000000</td>\n      <td>25.951660</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.000000</td>\n      <td>2.500000</td>\n      <td>44.500000</td>\n      <td>0.750000</td>\n      <td>84.968750</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>0.200000</td>\n      <td>3.000000</td>\n      <td>39.200000</td>\n      <td>0.600000</td>\n      <td>32.550000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>43.000000</td>\n      <td>1.000000</td>\n      <td>46.900000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Chance of survival is greatest when one has only 1-2 people with them on the ship. Having more than 3 siblings/children greatly reduces one's chance of survival.","metadata":{}},{"cell_type":"markdown","source":"### Fare vs Survival ###","metadata":{"execution":{"iopub.status.busy":"2023-08-26T03:32:30.698060Z","iopub.execute_input":"2023-08-26T03:32:30.698598Z","iopub.status.idle":"2023-08-26T03:32:30.725117Z","shell.execute_reply.started":"2023-08-26T03:32:30.698555Z","shell.execute_reply":"2023-08-26T03:32:30.723853Z"}}},{"cell_type":"code","source":"train_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.777901Z","iopub.execute_input":"2023-10-26T21:34:28.778313Z","iopub.status.idle":"2023-10-26T21:34:28.805996Z","shell.execute_reply.started":"2023-10-26T21:34:28.778280Z","shell.execute_reply":"2023-10-26T21:34:28.804913Z"},"trusted":true},"execution_count":324,"outputs":[{"execution_count":324,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked  \\\n0           0       3    male  22.0      1      0   7.2500   NaN        S   \n1           1       1  female  38.0      1      0  71.2833   C85        C   \n2           1       3  female  26.0      0      0   7.9250   NaN        S   \n3           1       1  female  35.0      1      0  53.1000  C123        S   \n4           0       3    male  35.0      0      0   8.0500   NaN        S   \n..        ...     ...     ...   ...    ...    ...      ...   ...      ...   \n886         0       2    male  27.0      0      0  13.0000   NaN        S   \n887         1       1  female  19.0      0      0  30.0000   B42        S   \n888         0       3  female   NaN      1      2  23.4500   NaN        S   \n889         1       1    male  26.0      0      0  30.0000  C148        C   \n890         0       3    male  32.0      0      0   7.7500   NaN        Q   \n\n    Binned Age  \n0     3. young  \n1     4. adult  \n2     3. young  \n3     4. adult  \n4     4. adult  \n..         ...  \n886   3. young  \n887    2. teen  \n888        NaN  \n889   3. young  \n890   4. adult  \n\n[891 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Binned Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>4. adult</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>4. adult</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>4. adult</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>S</td>\n      <td>2. teen</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>C</td>\n      <td>3. young</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n      <td>4. adult</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 10 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.scatter(train_df[\"Fare\"], train_df[\"Survived\"])","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:28.808076Z","iopub.execute_input":"2023-10-26T21:34:28.808573Z","iopub.status.idle":"2023-10-26T21:34:29.096628Z","shell.execute_reply.started":"2023-10-26T21:34:28.808529Z","shell.execute_reply":"2023-10-26T21:34:29.095254Z"},"trusted":true},"execution_count":325,"outputs":[{"execution_count":325,"output_type":"execute_result","data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7de6c61c73d0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"There doesn't seem to be much of a difference between the distribution. Let's check more in detail by making a boxplot. I'm going to remove the outlier at x = 500 to make the diagram look less squashed.","metadata":{}},{"cell_type":"code","source":"sns.boxplot(data = train_df, x = \"Survived\", y = \"Fare\")\nplt.title(\"Distribution of Passengers' Survival based on Fare\")\nplt.ylim(0, 300)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:29.098516Z","iopub.execute_input":"2023-10-26T21:34:29.098857Z","iopub.status.idle":"2023-10-26T21:34:29.346813Z","shell.execute_reply.started":"2023-10-26T21:34:29.098828Z","shell.execute_reply":"2023-10-26T21:34:29.345669Z"},"trusted":true},"execution_count":326,"outputs":[{"execution_count":326,"output_type":"execute_result","data":{"text/plain":"(0.0, 300.0)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Now the boxplot for \"Survived\" seems way bigger -- is this because of the outlier?","metadata":{}},{"cell_type":"code","source":"train_df[train_df[\"Fare\"] >= 500]","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:29.355521Z","iopub.execute_input":"2023-10-26T21:34:29.356934Z","iopub.status.idle":"2023-10-26T21:34:29.373242Z","shell.execute_reply.started":"2023-10-26T21:34:29.356879Z","shell.execute_reply":"2023-10-26T21:34:29.372140Z"},"trusted":true},"execution_count":327,"outputs":[{"execution_count":327,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age  SibSp  Parch      Fare        Cabin  \\\n258         1       1  female  35.0      0      0  512.3292          NaN   \n679         1       1    male  36.0      0      1  512.3292  B51 B53 B55   \n737         1       1    male  35.0      0      0  512.3292         B101   \n\n    Embarked Binned Age  \n258        C   4. adult  \n679        C   4. adult  \n737        C   4. adult  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Binned Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>258</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>512.3292</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>4. adult</td>\n    </tr>\n    <tr>\n      <th>679</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>36.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>512.3292</td>\n      <td>B51 B53 B55</td>\n      <td>C</td>\n      <td>4. adult</td>\n    </tr>\n    <tr>\n      <th>737</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>512.3292</td>\n      <td>B101</td>\n      <td>C</td>\n      <td>4. adult</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_dropped = train_df.drop(labels = [258, 679, 737], axis = 0)\ntrain_dropped.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:29.374807Z","iopub.execute_input":"2023-10-26T21:34:29.375151Z","iopub.status.idle":"2023-10-26T21:34:29.400223Z","shell.execute_reply.started":"2023-10-26T21:34:29.375124Z","shell.execute_reply":"2023-10-26T21:34:29.398673Z"},"trusted":true},"execution_count":328,"outputs":[{"execution_count":328,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked  \\\n0         0       3    male  22.0      1      0   7.2500   NaN        S   \n1         1       1  female  38.0      1      0  71.2833   C85        C   \n2         1       3  female  26.0      0      0   7.9250   NaN        S   \n3         1       1  female  35.0      1      0  53.1000  C123        S   \n4         0       3    male  35.0      0      0   8.0500   NaN        S   \n\n  Binned Age  \n0   3. young  \n1   4. adult  \n2   3. young  \n3   4. adult  \n4   4. adult  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Binned Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>4. adult</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>4. adult</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>4. adult</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.scatter(train_dropped[\"Fare\"], train_dropped[\"Survived\"])","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:29.401789Z","iopub.execute_input":"2023-10-26T21:34:29.402128Z","iopub.status.idle":"2023-10-26T21:34:29.689054Z","shell.execute_reply.started":"2023-10-26T21:34:29.402100Z","shell.execute_reply":"2023-10-26T21:34:29.687654Z"},"trusted":true},"execution_count":329,"outputs":[{"execution_count":329,"output_type":"execute_result","data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7de6c617d480>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"sns.boxplot(data = train_dropped, x = \"Survived\", y = \"Fare\")\nplt.title(\"Distribution of Passengers' Survival based on Fare\")\nplt.ylim(0, 300)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:29.690703Z","iopub.execute_input":"2023-10-26T21:34:29.691917Z","iopub.status.idle":"2023-10-26T21:34:29.998934Z","shell.execute_reply.started":"2023-10-26T21:34:29.691874Z","shell.execute_reply":"2023-10-26T21:34:29.997647Z"},"trusted":true},"execution_count":330,"outputs":[{"execution_count":330,"output_type":"execute_result","data":{"text/plain":"(0.0, 300.0)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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ONIihHjo6MvDlpkzZw5iYmLk53l5efDz88PVq1cr3RGWiIiIzFN+fj58fX0fesNSxcOOra2tfPfbwMBApKamYtWqVfJ5OllZWWjRooW8fE5Ojjza4+XlhdLSUty8edNodCcnJwchISFVblOj0VS6cRoAeVYYERERNR0PGwQxu7ueCyFQUlKC1q1bw8vLy+hmcKWlpUhOTpaDTPfu3dGsWTOjZTIzM3Hu3Llqww4RERFZDkVHdubOnYuBAwfC19cXt2/fxrZt25CUlISDBw9CkiRER0dj8eLFaNeuHdq1a4fFixfD3t4ekZGRAACdTodJkyZhxowZcHd3h5ubG2bOnImAgIAa3w2YiIiI1E3RsJOdnY3x48cjMzMTOp0OnTt3xsGDBxEWFgYAmDVrFoqKijBlyhTcvHkTQUFB+Pzzz42Oza1YsQI2NjYYM2YMioqK0K9fP8THx8Pa2lqpt0VERERmxOyus6OE/Px86HQ65OXl8ZwdIiKiJqKmf7/N7pwdIiIiovrEsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsEMWZ8OGDejbty82bNigdClEVM+mTp2K0NBQTJ06VelSyIww7JBFuXXrFhISElBeXo6EhATcunVL6ZKIqJ6kp6fj3LlzAIBz584hPT1d4YrIXDDskEV59913UV5eDgAoLy/H/PnzFa6IiOrL66+/Xu1zslwMO2Qx0tLScPbsWaO2M2fOIC0tTaGKiKi+bN26FXfu3DFqu3PnDrZu3apQRWROJCGEULoIpeXn50On0yEvLw/Ozs5Kl0MNoLy8HCNGjEB+fn6lPmdnZ+zevRtWVsz+RE3R3bt38fzzz1fZf/jwYdjY2DRiRdRYavr3m9/uZBG+/vprk0EHuLezfP31141cERHVl48//rhO/aR+DDtkEYKCgqpM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cP36dTRv3hy9evXCV199BX9/fwD3pg4XFRVhypQpuHnzJoKCgvD555/zGjtEREQkM+uws23btmr7JUlCbGwsYmNjG6cgIiIianKa1Dk7RERERLXFsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqsawQ0RERKrGsENERESqxrBDREREqmajdAGWQAiB4uJipcsgwOj3wN+J+dBqtZAkSekyHokQQv53iUHBQojMyP37wv37iFIYdhpBcXExBg4cqHQZ9ICRI0cqXQL9fwcOHICdnZ3SZTySkpIS+d9Tj7srWAmReSopKYG9vb2iNfAwFhEREakaR3YaWUHXcRBW/LErRgig/O69f1vZAE300IkaSOV34Xh6q9Jl1JlGo5H/vfqZXGisFSyGyEyUGP430nn/PqIU/tVtZMLKBrBupnQZFs5W6QIIgPJH8evH/ecaaazBsEP0AHM4H4+HsYiIiEjVGHaIiIhI1Rh2iIiISNUYdoiIiEjVGHaIiIhI1Rh2iIiISNUYdoiIiEjVGHaIiIhI1Rh2iIiISNUYdoiIiEjVGHaIiIhI1XhvLCKielJikKCeu341PUIApeX3/m1rxfv8KunevmA+GHaIiOrJ1ONuSpdARCbwMBYRERGpGkd2GoEQ9w1rG8qUK4TInNy3LxjtI02MVqvFgQMHlC6DABQXF2PkyJEAgF27dkGr1SpcEQEwi98Dw04jKCkpkf/t9N02BSshMk8lJSWwt7dXuoxHIkkS7OzslC6DHqDVavl7IRkPYxEREZGqcWSnEWg0GvnfBQEvQlhZK1iNhRMAyu/e+7eVDWBeEwYsilRugOPZTwAY7yNERPWNYacRSPfNf6z4ciei/5E4R5iIGhAPYxEREZGqcWSnEXC2hvngbA3zxN8DETUkhp1GwNka5omzNYiILAMPYxEREZGqMewQERGRqqkm7KxZswatW7eGVqtF9+7d8eWXXypdEhEREZkBVYSd7du3Izo6GvPmzcO3336LZ599FgMHDkR6errSpREREZHCVBF24uLiMGnSJLz22mvo0KEDVq5cCV9fX6xdu1bp0oiIiEhhTX42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"},"metadata":{}}]},{"cell_type":"markdown","source":"Despite getting rid of the outliers, the box plot still takes the same shape. Therefore the difference in distribution is not due to the 3 outliers. In general, people who survived could have paid more for the fare.","metadata":{}},{"cell_type":"markdown","source":"### Cabin vs Survival ###","metadata":{}},{"cell_type":"code","source":"cabin_df = train_df\ncabin_df[\"Cabin Binary\"] = cabin_df[\"Cabin\"].apply(lambda x: 1 if pd.notna(x) else 0)\ncabin_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.000755Z","iopub.execute_input":"2023-10-26T21:34:30.002163Z","iopub.status.idle":"2023-10-26T21:34:30.025851Z","shell.execute_reply.started":"2023-10-26T21:34:30.002114Z","shell.execute_reply":"2023-10-26T21:34:30.024381Z"},"trusted":true},"execution_count":331,"outputs":[{"execution_count":331,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked  \\\n0         0       3    male  22.0      1      0   7.2500   NaN        S   \n1         1       1  female  38.0      1      0  71.2833   C85        C   \n2         1       3  female  26.0      0      0   7.9250   NaN        S   \n3         1       1  female  35.0      1      0  53.1000  C123        S   \n4         0       3    male  35.0      0      0   8.0500   NaN        S   \n\n  Binned Age  Cabin Binary  \n0   3. young             0  \n1   4. adult             1  \n2   3. young             0  \n3   4. adult             1  \n4   4. adult             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Binned Age</th>\n      <th>Cabin Binary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>4. adult</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>4. adult</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>4. adult</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"cabin_df = cabin_df.groupby(\"Cabin Binary\").mean().reset_index()\ncabin_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.027523Z","iopub.execute_input":"2023-10-26T21:34:30.027842Z","iopub.status.idle":"2023-10-26T21:34:30.052213Z","shell.execute_reply.started":"2023-10-26T21:34:30.027814Z","shell.execute_reply":"2023-10-26T21:34:30.050677Z"},"trusted":true},"execution_count":332,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2535910709.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  cabin_df = cabin_df.groupby(\"Cabin Binary\").mean().reset_index()\n","output_type":"stream"},{"execution_count":332,"output_type":"execute_result","data":{"text/plain":"   Cabin Binary  Survived    Pclass        Age     SibSp     Parch       Fare\n0             0  0.299854  2.639010  27.555293  0.547307  0.365357  19.157325\n1             1  0.666667  1.196078  35.829297  0.441176  0.436275  76.141504","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cabin Binary</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.299854</td>\n      <td>2.639010</td>\n      <td>27.555293</td>\n      <td>0.547307</td>\n      <td>0.365357</td>\n      <td>19.157325</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.666667</td>\n      <td>1.196078</td>\n      <td>35.829297</td>\n      <td>0.441176</td>\n      <td>0.436275</td>\n      <td>76.141504</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"People who had a cabin were more likely to survive. This could be because we showed earlier that often people who had cabins were in 1st or 2nd class.\n\nDoes the number of the cabin matter? For example, maybe people who had the C cabins had a higher rate of survival.","metadata":{}},{"cell_type":"code","source":"train_df[\"Cabin Letter\"] = train_df[\"Cabin\"].str[0]\ntrain_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.054003Z","iopub.execute_input":"2023-10-26T21:34:30.054652Z","iopub.status.idle":"2023-10-26T21:34:30.080672Z","shell.execute_reply.started":"2023-10-26T21:34:30.054621Z","shell.execute_reply":"2023-10-26T21:34:30.079187Z"},"trusted":true},"execution_count":333,"outputs":[{"execution_count":333,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked  \\\n0           0       3    male  22.0      1      0   7.2500   NaN        S   \n1           1       1  female  38.0      1      0  71.2833   C85        C   \n2           1       3  female  26.0      0      0   7.9250   NaN        S   \n3           1       1  female  35.0      1      0  53.1000  C123        S   \n4           0       3    male  35.0      0      0   8.0500   NaN        S   \n..        ...     ...     ...   ...    ...    ...      ...   ...      ...   \n886         0       2    male  27.0      0      0  13.0000   NaN        S   \n887         1       1  female  19.0      0      0  30.0000   B42        S   \n888         0       3  female   NaN      1      2  23.4500   NaN        S   \n889         1       1    male  26.0      0      0  30.0000  C148        C   \n890         0       3    male  32.0      0      0   7.7500   NaN        Q   \n\n    Binned Age  Cabin Binary Cabin Letter  \n0     3. young             0          NaN  \n1     4. adult             1            C  \n2     3. young             0          NaN  \n3     4. adult             1            C  \n4     4. adult             0          NaN  \n..         ...           ...          ...  \n886   3. young             0          NaN  \n887    2. teen             1            B  \n888        NaN             0          NaN  \n889   3. young             1            C  \n890   4. adult             0          NaN  \n\n[891 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>Binned Age</th>\n      <th>Cabin Binary</th>\n      <th>Cabin Letter</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n      <td>4. adult</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n      <td>4. adult</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>4. adult</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>3. young</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>B42</td>\n      <td>S</td>\n      <td>2. teen</td>\n      <td>1</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C148</td>\n      <td>C</td>\n      <td>3. young</td>\n      <td>1</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n      <td>4. adult</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"cabins = train_df[train_df[\"Cabin Letter\"].notna()]\nsns.countplot(data=cabins, x=\"Cabin Letter\", hue = \"Survived\")\nplt.title(\"Survival Rate by Cabin Letter\")","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.083315Z","iopub.execute_input":"2023-10-26T21:34:30.083729Z","iopub.status.idle":"2023-10-26T21:34:30.459091Z","shell.execute_reply.started":"2023-10-26T21:34:30.083691Z","shell.execute_reply":"2023-10-26T21:34:30.457754Z"},"trusted":true},"execution_count":334,"outputs":[{"execution_count":334,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Survival Rate by Cabin Letter')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"It seems like people from certain cabin numbers had higher chances of surviving. For example, cabin number B, D, and E (and C somewhat) had high chance of survival. For sections A, G, and F, there was either an equal chance of survival/death. There isn't enough data about T, but from this graph it seems that no one survived from section T.","metadata":{}},{"cell_type":"markdown","source":"### Embarked vs Survival (Brief) ###","metadata":{}},{"cell_type":"code","source":"embarked_df = train_df.groupby(\"Embarked\").mean().reset_index()\nembarked_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.460687Z","iopub.execute_input":"2023-10-26T21:34:30.461093Z","iopub.status.idle":"2023-10-26T21:34:30.486872Z","shell.execute_reply.started":"2023-10-26T21:34:30.461061Z","shell.execute_reply":"2023-10-26T21:34:30.486039Z"},"trusted":true},"execution_count":335,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/2504431490.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  embarked_df = train_df.groupby(\"Embarked\").mean().reset_index()\n","output_type":"stream"},{"execution_count":335,"output_type":"execute_result","data":{"text/plain":"  Embarked  Survived    Pclass        Age     SibSp     Parch       Fare  \\\n0        C  0.553571  1.886905  30.814769  0.386905  0.363095  59.954144   \n1        Q  0.389610  2.909091  28.089286  0.428571  0.168831  13.276030   \n2        S  0.336957  2.350932  29.445397  0.571429  0.413043  27.079812   \n\n   Cabin Binary  \n0      0.410714  \n1      0.051948  \n2      0.200311  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Embarked</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Cabin Binary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>C</td>\n      <td>0.553571</td>\n      <td>1.886905</td>\n      <td>30.814769</td>\n      <td>0.386905</td>\n      <td>0.363095</td>\n      <td>59.954144</td>\n      <td>0.410714</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Q</td>\n      <td>0.389610</td>\n      <td>2.909091</td>\n      <td>28.089286</td>\n      <td>0.428571</td>\n      <td>0.168831</td>\n      <td>13.276030</td>\n      <td>0.051948</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>S</td>\n      <td>0.336957</td>\n      <td>2.350932</td>\n      <td>29.445397</td>\n      <td>0.571429</td>\n      <td>0.413043</td>\n      <td>27.079812</td>\n      <td>0.200311</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"It is interesting to note that people who were embarked at Cherbourg were more likely to survive, while the other two options (Queenstown and Southampton) had a lower survival rate.\n\nHowever, the Titanic had this route: \n\n**Southampton --> Cherbourg --> Queenstown --> (sinks) --> (supposed to arrive at) New York**\n\nIt would make sense if people from Southampton/Queenstown had the highest survival rate since they could've prioritized people who were on the ship the longest/shortest -- however, Cherbourg had the highest survival rate. Why?\n\nOne reason could be that maybe Cherbourg is a richer area than the other two, and more people had 1st/2nd class seats.","metadata":{}},{"cell_type":"markdown","source":"# **Feature Engineering** #","metadata":{}},{"cell_type":"markdown","source":"I'm not going to do anything too fancy since most features already look good -- I'm just going to combine SibSp and Parch since they are both about having a family member. We could also determine whether the passenger was alone or with a family from this information. I'm going to remove any features that I won't use as a result of these new features being created (I'm also dropping \"Binned Age\" since that was only used for the sake of the visualization in the EDA step).","metadata":{}},{"cell_type":"code","source":"train_df[\"Family Size\"] = train_df[\"SibSp\"] + train_df[\"Parch\"]\n#train_df[\"Alone\"] = train_df[\"Family Size\"]==0\ntrain_df = train_df.drop(labels= [\"Cabin\", \"Cabin Binary\", \"SibSp\", \"Parch\", \"Binned Age\"], axis=1)\ntrain_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.488172Z","iopub.execute_input":"2023-10-26T21:34:30.488687Z","iopub.status.idle":"2023-10-26T21:34:30.510416Z","shell.execute_reply.started":"2023-10-26T21:34:30.488657Z","shell.execute_reply":"2023-10-26T21:34:30.509165Z"},"trusted":true},"execution_count":336,"outputs":[{"execution_count":336,"output_type":"execute_result","data":{"text/plain":"     Survived  Pclass     Sex   Age     Fare Embarked Cabin Letter  \\\n0           0       3    male  22.0   7.2500        S          NaN   \n1           1       1  female  38.0  71.2833        C            C   \n2           1       3  female  26.0   7.9250        S          NaN   \n3           1       1  female  35.0  53.1000        S            C   \n4           0       3    male  35.0   8.0500        S          NaN   \n..        ...     ...     ...   ...      ...      ...          ...   \n886         0       2    male  27.0  13.0000        S          NaN   \n887         1       1  female  19.0  30.0000        S            B   \n888         0       3  female   NaN  23.4500        S          NaN   \n889         1       1    male  26.0  30.0000        C            C   \n890         0       3    male  32.0   7.7500        Q          NaN   \n\n     Family Size  \n0              1  \n1              1  \n2              0  \n3              1  \n4              0  \n..           ...  \n886            0  \n887            0  \n888            3  \n889            0  \n890            0  \n\n[891 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Cabin Letter</th>\n      <th>Family Size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>C</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>2</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>13.0000</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>30.0000</td>\n      <td>S</td>\n      <td>B</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>3</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>23.4500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>C</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>7.7500</td>\n      <td>Q</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Modeling: Logistic Regression** #","metadata":{}},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.512116Z","iopub.execute_input":"2023-10-26T21:34:30.512460Z","iopub.status.idle":"2023-10-26T21:34:30.527039Z","shell.execute_reply.started":"2023-10-26T21:34:30.512430Z","shell.execute_reply":"2023-10-26T21:34:30.525863Z"},"trusted":true},"execution_count":337,"outputs":[{"execution_count":337,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex   Age     Fare Embarked Cabin Letter  Family Size\n0         0       3    male  22.0   7.2500        S          NaN            1\n1         1       1  female  38.0  71.2833        C            C            1\n2         1       3  female  26.0   7.9250        S          NaN            0\n3         1       1  female  35.0  53.1000        S            C            1\n4         0       3    male  35.0   8.0500        S          NaN            0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Cabin Letter</th>\n      <th>Family Size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>C</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.529179Z","iopub.execute_input":"2023-10-26T21:34:30.530054Z","iopub.status.idle":"2023-10-26T21:34:30.542263Z","shell.execute_reply.started":"2023-10-26T21:34:30.530007Z","shell.execute_reply":"2023-10-26T21:34:30.541036Z"},"trusted":true},"execution_count":338,"outputs":[]},{"cell_type":"markdown","source":"### Imputing NaN Ages With The Mean Age ###","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='mean')\nX['Age'] = imputer.fit_transform(X[['Age']])\nX","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.543687Z","iopub.execute_input":"2023-10-26T21:34:30.544329Z","iopub.status.idle":"2023-10-26T21:34:30.574895Z","shell.execute_reply.started":"2023-10-26T21:34:30.544295Z","shell.execute_reply":"2023-10-26T21:34:30.573732Z"},"trusted":true},"execution_count":339,"outputs":[{"execution_count":339,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex        Age     Fare Embarked Cabin Letter  Family Size\n0         3    male  22.000000   7.2500        S          NaN            1\n1         1  female  38.000000  71.2833        C            C            1\n2         3  female  26.000000   7.9250        S          NaN            0\n3         1  female  35.000000  53.1000        S            C            1\n4         3    male  35.000000   8.0500        S          NaN            0\n..      ...     ...        ...      ...      ...          ...          ...\n886       2    male  27.000000  13.0000        S          NaN            0\n887       1  female  19.000000  30.0000        S            B            0\n888       3  female  29.699118  23.4500        S          NaN            3\n889       1    male  26.000000  30.0000        C            C            0\n890       3    male  32.000000   7.7500        Q          NaN            0\n\n[891 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Cabin Letter</th>\n      <th>Family Size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>22.000000</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>female</td>\n      <td>38.000000</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>C</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>female</td>\n      <td>26.000000</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>female</td>\n      <td>35.000000</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>C</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>male</td>\n      <td>35.000000</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>2</td>\n      <td>male</td>\n      <td>27.000000</td>\n      <td>13.0000</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>female</td>\n      <td>19.000000</td>\n      <td>30.0000</td>\n      <td>S</td>\n      <td>B</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>3</td>\n      <td>female</td>\n      <td>29.699118</td>\n      <td>23.4500</td>\n      <td>S</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>male</td>\n      <td>26.000000</td>\n      <td>30.0000</td>\n      <td>C</td>\n      <td>C</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>3</td>\n      <td>male</td>\n      <td>32.000000</td>\n      <td>7.7500</td>\n      <td>Q</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 7 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### One Hot Encoding ###","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder()\nencoder.fit(X[[\"Sex\", \"Embarked\", \"Cabin Letter\"]])\nencoded_cols = encoder.transform(X[[\"Sex\", \"Embarked\", \"Cabin Letter\"]])\nencoded_df = pd.DataFrame(encoded_cols.toarray(), columns=encoder.get_feature_names_out([\"Sex\", \"Embarked\", \"Cabin Letter\"]))\nX_encoded = pd.concat([X, encoded_df], axis=1).drop([\"Sex\", \"Embarked\", \"Cabin Letter\"], axis = 1)\nX_encoded = X_encoded.drop(columns=[\"Cabin Letter_T\", \"Embarked_nan\"]) #insignificant columns / errors if you don't drop \nX_encoded","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.576397Z","iopub.execute_input":"2023-10-26T21:34:30.576718Z","iopub.status.idle":"2023-10-26T21:34:30.627464Z","shell.execute_reply.started":"2023-10-26T21:34:30.576689Z","shell.execute_reply":"2023-10-26T21:34:30.626042Z"},"trusted":true},"execution_count":340,"outputs":[{"execution_count":340,"output_type":"execute_result","data":{"text/plain":"     Pclass        Age     Fare  Family Size  Sex_female  Sex_male  \\\n0         3  22.000000   7.2500            1         0.0       1.0   \n1         1  38.000000  71.2833            1         1.0       0.0   \n2         3  26.000000   7.9250            0         1.0       0.0   \n3         1  35.000000  53.1000            1         1.0       0.0   \n4         3  35.000000   8.0500            0         0.0       1.0   \n..      ...        ...      ...          ...         ...       ...   \n886       2  27.000000  13.0000            0         0.0       1.0   \n887       1  19.000000  30.0000            0         1.0       0.0   \n888       3  29.699118  23.4500            3         1.0       0.0   \n889       1  26.000000  30.0000            0         0.0       1.0   \n890       3  32.000000   7.7500            0         0.0       1.0   \n\n     Embarked_C  Embarked_Q  Embarked_S  Cabin Letter_A  Cabin Letter_B  \\\n0           0.0         0.0         1.0             0.0             0.0   \n1           1.0         0.0         0.0             0.0             0.0   \n2           0.0         0.0         1.0             0.0             0.0   \n3           0.0         0.0         1.0             0.0             0.0   \n4           0.0         0.0         1.0             0.0             0.0   \n..          ...         ...         ...             ...             ...   \n886         0.0         0.0         1.0             0.0             0.0   \n887         0.0         0.0         1.0             0.0             1.0   \n888         0.0         0.0         1.0             0.0             0.0   \n889         1.0         0.0         0.0             0.0             0.0   \n890         0.0         1.0         0.0             0.0             0.0   \n\n     Cabin Letter_C  Cabin Letter_D  Cabin Letter_E  Cabin Letter_F  \\\n0               0.0             0.0             0.0             0.0   \n1               1.0             0.0             0.0             0.0   \n2               0.0             0.0             0.0             0.0   \n3               1.0             0.0             0.0             0.0   \n4               0.0             0.0             0.0             0.0   \n..              ...             ...             ...             ...   \n886             0.0             0.0             0.0             0.0   \n887             0.0             0.0             0.0             0.0   \n888             0.0             0.0             0.0             0.0   \n889             1.0             0.0             0.0             0.0   \n890             0.0             0.0             0.0             0.0   \n\n     Cabin Letter_G  Cabin Letter_nan  \n0               0.0               1.0  \n1               0.0               0.0  \n2               0.0               1.0  \n3               0.0               0.0  \n4               0.0               1.0  \n..              ...               ...  \n886             0.0               1.0  \n887             0.0               0.0  \n888             0.0               1.0  \n889             0.0               0.0  \n890             0.0               1.0  \n\n[891 rows x 17 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Family Size</th>\n      <th>Sex_female</th>\n      <th>Sex_male</th>\n      <th>Embarked_C</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Cabin Letter_A</th>\n      <th>Cabin Letter_B</th>\n      <th>Cabin Letter_C</th>\n      <th>Cabin Letter_D</th>\n      <th>Cabin Letter_E</th>\n      <th>Cabin Letter_F</th>\n      <th>Cabin Letter_G</th>\n      <th>Cabin Letter_nan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>22.000000</td>\n      <td>7.2500</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38.000000</td>\n      <td>71.2833</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>26.000000</td>\n      <td>7.9250</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>35.000000</td>\n      <td>53.1000</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>35.000000</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>2</td>\n      <td>27.000000</td>\n      <td>13.0000</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>19.000000</td>\n      <td>30.0000</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>3</td>\n      <td>29.699118</td>\n      <td>23.4500</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>26.000000</td>\n      <td>30.0000</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>3</td>\n      <td>32.000000</td>\n      <td>7.7500</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows × 17 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Fitting the Model ###","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size = 0.2)\nmodel = LogisticRegression(max_iter=1000)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.631258Z","iopub.execute_input":"2023-10-26T21:34:30.631590Z","iopub.status.idle":"2023-10-26T21:34:30.911288Z","shell.execute_reply.started":"2023-10-26T21:34:30.631562Z","shell.execute_reply":"2023-10-26T21:34:30.909712Z"},"trusted":true},"execution_count":341,"outputs":[]},{"cell_type":"markdown","source":"### Evaluating the Model ###","metadata":{}},{"cell_type":"code","source":"accuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\nprint(\"Classification Report:\")\nprint(class_report)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.914097Z","iopub.execute_input":"2023-10-26T21:34:30.915126Z","iopub.status.idle":"2023-10-26T21:34:30.946824Z","shell.execute_reply.started":"2023-10-26T21:34:30.915070Z","shell.execute_reply":"2023-10-26T21:34:30.945434Z"},"trusted":true},"execution_count":342,"outputs":[{"name":"stdout","text":"Accuracy: 0.78\nConfusion Matrix:\n[[89 18]\n [21 51]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.81      0.83      0.82       107\n           1       0.74      0.71      0.72        72\n\n    accuracy                           0.78       179\n   macro avg       0.77      0.77      0.77       179\nweighted avg       0.78      0.78      0.78       179\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Explanation of evaluation metrics (from CS188 Class):**\n- Accuracy\n    - number of true samples / all samples\n    - most times, using just the accuracy is not good practice\n- Precision — does it ever output false positives?\n    - number of true positives / number of positives (TP + FP)\n- Recall — does it always recognize the spam?\n    - number of true positives / true positive + false negative\n- F1 Score — combination of precision and recall\n    - high F1 = good\n    - 2 * (precision * recall) / (precision + recall)","metadata":{}},{"cell_type":"markdown","source":"# **Modeling: Naive Bayes** #","metadata":{}},{"cell_type":"code","source":"from sklearn.naive_bayes import GaussianNB\nX_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size = 0.2)\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.949105Z","iopub.execute_input":"2023-10-26T21:34:30.950046Z","iopub.status.idle":"2023-10-26T21:34:30.978976Z","shell.execute_reply.started":"2023-10-26T21:34:30.949975Z","shell.execute_reply":"2023-10-26T21:34:30.977480Z"},"trusted":true},"execution_count":343,"outputs":[]},{"cell_type":"code","source":"accuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\nprint(\"Classification Report:\")\nprint(class_report)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:30.981355Z","iopub.execute_input":"2023-10-26T21:34:30.982279Z","iopub.status.idle":"2023-10-26T21:34:31.010359Z","shell.execute_reply.started":"2023-10-26T21:34:30.982214Z","shell.execute_reply":"2023-10-26T21:34:31.008854Z"},"trusted":true},"execution_count":344,"outputs":[{"name":"stdout","text":"Accuracy: 0.68\nConfusion Matrix:\n[[93 18]\n [39 29]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.70      0.84      0.77       111\n           1       0.62      0.43      0.50        68\n\n    accuracy                           0.68       179\n   macro avg       0.66      0.63      0.63       179\nweighted avg       0.67      0.68      0.67       179\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Modeling: K Nearest Neighbor** #","metadata":{}},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\nX_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size = 0.2)\nmodel = KNeighborsClassifier(n_neighbors = 5)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.012673Z","iopub.execute_input":"2023-10-26T21:34:31.013605Z","iopub.status.idle":"2023-10-26T21:34:31.045742Z","shell.execute_reply.started":"2023-10-26T21:34:31.013548Z","shell.execute_reply":"2023-10-26T21:34:31.044479Z"},"trusted":true},"execution_count":345,"outputs":[]},{"cell_type":"code","source":"accuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\nprint(\"Classification Report:\")\nprint(class_report)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.050553Z","iopub.execute_input":"2023-10-26T21:34:31.050964Z","iopub.status.idle":"2023-10-26T21:34:31.070497Z","shell.execute_reply.started":"2023-10-26T21:34:31.050930Z","shell.execute_reply":"2023-10-26T21:34:31.069315Z"},"trusted":true},"execution_count":346,"outputs":[{"name":"stdout","text":"Accuracy: 0.68\nConfusion Matrix:\n[[85 20]\n [38 36]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.69      0.81      0.75       105\n           1       0.64      0.49      0.55        74\n\n    accuracy                           0.68       179\n   macro avg       0.67      0.65      0.65       179\nweighted avg       0.67      0.68      0.67       179\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Modeling: Random Forest** #","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nX_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size = 0.2)\nmodel = RandomForestClassifier(n_estimators = 50, max_depth = 1)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.072093Z","iopub.execute_input":"2023-10-26T21:34:31.072433Z","iopub.status.idle":"2023-10-26T21:34:31.210976Z","shell.execute_reply.started":"2023-10-26T21:34:31.072403Z","shell.execute_reply":"2023-10-26T21:34:31.209795Z"},"trusted":true},"execution_count":347,"outputs":[]},{"cell_type":"code","source":"accuracy = accuracy_score(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\nclass_report = classification_report(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\nprint(\"Classification Report:\")\nprint(class_report)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.212880Z","iopub.execute_input":"2023-10-26T21:34:31.213343Z","iopub.status.idle":"2023-10-26T21:34:31.233024Z","shell.execute_reply.started":"2023-10-26T21:34:31.213304Z","shell.execute_reply":"2023-10-26T21:34:31.231739Z"},"trusted":true},"execution_count":348,"outputs":[{"name":"stdout","text":"Accuracy: 0.78\nConfusion Matrix:\n[[102   9]\n [ 30  38]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.77      0.92      0.84       111\n           1       0.81      0.56      0.66        68\n\n    accuracy                           0.78       179\n   macro avg       0.79      0.74      0.75       179\nweighted avg       0.79      0.78      0.77       179\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Predicting Survivors of the Test Set** #","metadata":{}},{"cell_type":"code","source":"#read test csv\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.234372Z","iopub.execute_input":"2023-10-26T21:34:31.234790Z","iopub.status.idle":"2023-10-26T21:34:31.258688Z","shell.execute_reply.started":"2023-10-26T21:34:31.234739Z","shell.execute_reply":"2023-10-26T21:34:31.257294Z"},"trusted":true},"execution_count":349,"outputs":[{"execution_count":349,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#Feature Engineering on test set\ntest_df[\"Family Size\"] = test_df[\"SibSp\"] + test_df[\"Parch\"]\ntest_df[\"Cabin Letter\"] = test_df[\"Cabin\"].str[0]\ntest_passengerid = test_df[\"PassengerId\"]\ntest_df = test_df.drop(labels= [\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\", \"SibSp\", \"Parch\"], axis=1)\ntest_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.260138Z","iopub.execute_input":"2023-10-26T21:34:31.260487Z","iopub.status.idle":"2023-10-26T21:34:31.286403Z","shell.execute_reply.started":"2023-10-26T21:34:31.260457Z","shell.execute_reply":"2023-10-26T21:34:31.285328Z"},"trusted":true},"execution_count":350,"outputs":[{"execution_count":350,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex   Age      Fare Embarked  Family Size Cabin Letter\n0         3    male  34.5    7.8292        Q            0          NaN\n1         3  female  47.0    7.0000        S            1          NaN\n2         2    male  62.0    9.6875        Q            0          NaN\n3         3    male  27.0    8.6625        S            0          NaN\n4         3  female  22.0   12.2875        S            2          NaN\n..      ...     ...   ...       ...      ...          ...          ...\n413       3    male   NaN    8.0500        S            0          NaN\n414       1  female  39.0  108.9000        C            0            C\n415       3    male  38.5    7.2500        S            0          NaN\n416       3    male   NaN    8.0500        S            0          NaN\n417       3    male   NaN   22.3583        C            2          NaN\n\n[418 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Family Size</th>\n      <th>Cabin Letter</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>7.8292</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>7.0000</td>\n      <td>S</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>9.6875</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>8.6625</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>12.2875</td>\n      <td>S</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>108.9000</td>\n      <td>C</td>\n      <td>0</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>male</td>\n      <td>38.5</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>22.3583</td>\n      <td>C</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 7 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#X = test_df.drop(\"Survived\", axis=1)\n#y = test_df[\"Survived\"]\nX = test_df\ny = []\n\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='mean')\nX[\"Age\"] = imputer.fit_transform(X[[\"Age\"]])\nX[\"Fare\"] = imputer.fit_transform(X[[\"Fare\"]])\n\nfrom sklearn.preprocessing import OneHotEncoder\nencoder = OneHotEncoder()\nencoder.fit(X[[\"Sex\", \"Embarked\", \"Cabin Letter\"]])\nencoded_cols = encoder.transform(X[[\"Sex\", \"Embarked\", \"Cabin Letter\"]])\nencoded_df = pd.DataFrame(encoded_cols.toarray(), columns=encoder.get_feature_names_out([\"Sex\", \"Embarked\", \"Cabin Letter\"]))\nX_test_encoded = pd.concat([X, encoded_df], axis=1).drop([\"Sex\", \"Embarked\", \"Cabin Letter\"], axis = 1)\nX_test_encoded","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.287589Z","iopub.execute_input":"2023-10-26T21:34:31.287900Z","iopub.status.idle":"2023-10-26T21:34:31.356391Z","shell.execute_reply.started":"2023-10-26T21:34:31.287871Z","shell.execute_reply":"2023-10-26T21:34:31.355082Z"},"trusted":true},"execution_count":351,"outputs":[{"execution_count":351,"output_type":"execute_result","data":{"text/plain":"     Pclass       Age      Fare  Family Size  Sex_female  Sex_male  \\\n0         3  34.50000    7.8292            0         0.0       1.0   \n1         3  47.00000    7.0000            1         1.0       0.0   \n2         2  62.00000    9.6875            0         0.0       1.0   \n3         3  27.00000    8.6625            0         0.0       1.0   \n4         3  22.00000   12.2875            2         1.0       0.0   \n..      ...       ...       ...          ...         ...       ...   \n413       3  30.27259    8.0500            0         0.0       1.0   \n414       1  39.00000  108.9000            0         1.0       0.0   \n415       3  38.50000    7.2500            0         0.0       1.0   \n416       3  30.27259    8.0500            0         0.0       1.0   \n417       3  30.27259   22.3583            2         0.0       1.0   \n\n     Embarked_C  Embarked_Q  Embarked_S  Cabin Letter_A  Cabin Letter_B  \\\n0           0.0         1.0         0.0             0.0             0.0   \n1           0.0         0.0         1.0             0.0             0.0   \n2           0.0         1.0         0.0             0.0             0.0   \n3           0.0         0.0         1.0             0.0             0.0   \n4           0.0         0.0         1.0             0.0             0.0   \n..          ...         ...         ...             ...             ...   \n413         0.0         0.0         1.0             0.0             0.0   \n414         1.0         0.0         0.0             0.0             0.0   \n415         0.0         0.0         1.0             0.0             0.0   \n416         0.0         0.0         1.0             0.0             0.0   \n417         1.0         0.0         0.0             0.0             0.0   \n\n     Cabin Letter_C  Cabin Letter_D  Cabin Letter_E  Cabin Letter_F  \\\n0               0.0             0.0             0.0             0.0   \n1               0.0             0.0             0.0             0.0   \n2               0.0             0.0             0.0             0.0   \n3               0.0             0.0             0.0             0.0   \n4               0.0             0.0             0.0             0.0   \n..              ...             ...             ...             ...   \n413             0.0             0.0             0.0             0.0   \n414             1.0             0.0             0.0             0.0   \n415             0.0             0.0             0.0             0.0   \n416             0.0             0.0             0.0             0.0   \n417             0.0             0.0             0.0             0.0   \n\n     Cabin Letter_G  Cabin Letter_nan  \n0               0.0               1.0  \n1               0.0               1.0  \n2               0.0               1.0  \n3               0.0               1.0  \n4               0.0               1.0  \n..              ...               ...  \n413             0.0               1.0  \n414             0.0               0.0  \n415             0.0               1.0  \n416             0.0               1.0  \n417             0.0               1.0  \n\n[418 rows x 17 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Family Size</th>\n      <th>Sex_female</th>\n      <th>Sex_male</th>\n      <th>Embarked_C</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>Cabin Letter_A</th>\n      <th>Cabin Letter_B</th>\n      <th>Cabin Letter_C</th>\n      <th>Cabin Letter_D</th>\n      <th>Cabin Letter_E</th>\n      <th>Cabin Letter_F</th>\n      <th>Cabin Letter_G</th>\n      <th>Cabin Letter_nan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>34.50000</td>\n      <td>7.8292</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>47.00000</td>\n      <td>7.0000</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>62.00000</td>\n      <td>9.6875</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>27.00000</td>\n      <td>8.6625</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>22.00000</td>\n      <td>12.2875</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>30.27259</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>39.00000</td>\n      <td>108.9000</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>38.50000</td>\n      <td>7.2500</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>30.27259</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>30.27259</td>\n      <td>22.3583</td>\n      <td>2</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 17 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.358248Z","iopub.execute_input":"2023-10-26T21:34:31.358922Z","iopub.status.idle":"2023-10-26T21:34:31.380304Z","shell.execute_reply.started":"2023-10-26T21:34:31.358880Z","shell.execute_reply":"2023-10-26T21:34:31.379294Z"},"trusted":true},"execution_count":352,"outputs":[{"execution_count":352,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex       Age      Fare Embarked  Family Size Cabin Letter\n0         3    male  34.50000    7.8292        Q            0          NaN\n1         3  female  47.00000    7.0000        S            1          NaN\n2         2    male  62.00000    9.6875        Q            0          NaN\n3         3    male  27.00000    8.6625        S            0          NaN\n4         3  female  22.00000   12.2875        S            2          NaN\n..      ...     ...       ...       ...      ...          ...          ...\n413       3    male  30.27259    8.0500        S            0          NaN\n414       1  female  39.00000  108.9000        C            0            C\n415       3    male  38.50000    7.2500        S            0          NaN\n416       3    male  30.27259    8.0500        S            0          NaN\n417       3    male  30.27259   22.3583        C            2          NaN\n\n[418 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>Family Size</th>\n      <th>Cabin Letter</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34.50000</td>\n      <td>7.8292</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47.00000</td>\n      <td>7.0000</td>\n      <td>S</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62.00000</td>\n      <td>9.6875</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27.00000</td>\n      <td>8.6625</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22.00000</td>\n      <td>12.2875</td>\n      <td>S</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>male</td>\n      <td>30.27259</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>female</td>\n      <td>39.00000</td>\n      <td>108.9000</td>\n      <td>C</td>\n      <td>0</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>male</td>\n      <td>38.50000</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>male</td>\n      <td>30.27259</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>male</td>\n      <td>30.27259</td>\n      <td>22.3583</td>\n      <td>C</td>\n      <td>2</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 7 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y = train_df[\"Survived\"]\n#X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size = 0.2)\nmodel = RandomForestClassifier(n_estimators = 50, max_depth = 1)\nmodel.fit(X_encoded, y) \npredictions = model.predict(X_test_encoded)\n\noutput = pd.DataFrame({'PassengerId': test_passengerid, 'Survived': predictions})\noutput.to_csv('not_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.381808Z","iopub.execute_input":"2023-10-26T21:34:31.383221Z","iopub.status.idle":"2023-10-26T21:34:31.533187Z","shell.execute_reply.started":"2023-10-26T21:34:31.383181Z","shell.execute_reply":"2023-10-26T21:34:31.531943Z"},"trusted":true},"execution_count":353,"outputs":[{"name":"stdout","text":"Your submission was successfully saved!\n","output_type":"stream"}]},{"cell_type":"markdown","source":"I got an error that \"Input X contains NaN.\" Upon checking, one singular row had a NaN value for the \"embarked\" column. In theory I should've imputed all columns but didn't, so I will impute just the embarked column (and try to impute all in the future).","metadata":{}},{"cell_type":"markdown","source":"# Neural Network Approach (Excerpt from Data 144's Titanic Project)","metadata":{}},{"cell_type":"markdown","source":"The following code uses hyperparameters and features that yielded the highest accuracy when doing a similar Titanic project in a class named Data144 (data mining and analysis).","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntrain_df = train_df.drop(labels = [\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\", \"Fare\"], axis=1)\ntest_passengerid = test_df[\"PassengerId\"]\ntest_df = test_df.drop(labels = [\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\", \"Fare\"], axis=1)\ny_train = train_df[\"Survived\"]\nX_train = train_df.drop(\"Survived\", axis=1)\nX_test = test_df","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.534682Z","iopub.execute_input":"2023-10-26T21:34:31.535055Z","iopub.status.idle":"2023-10-26T21:34:31.558288Z","shell.execute_reply.started":"2023-10-26T21:34:31.535022Z","shell.execute_reply":"2023-10-26T21:34:31.556556Z"},"trusted":true},"execution_count":354,"outputs":[]},{"cell_type":"markdown","source":"**Changing Age Column**\n\nA lot of the age columns are empty so we are going to replace age column with the mean.","metadata":{}},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='mean')\nX_train['Age'] = imputer.fit_transform(X_train[['Age']])\nX_test['Age'] = imputer.fit_transform(X_test[['Age']])\nX_test.head()","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.559877Z","iopub.execute_input":"2023-10-26T21:34:31.560260Z","iopub.status.idle":"2023-10-26T21:34:31.585606Z","shell.execute_reply.started":"2023-10-26T21:34:31.560229Z","shell.execute_reply":"2023-10-26T21:34:31.584487Z"},"trusted":true},"execution_count":355,"outputs":[{"execution_count":355,"output_type":"execute_result","data":{"text/plain":"   Pclass     Sex   Age  SibSp  Parch Embarked\n0       3    male  34.5      0      0        Q\n1       3  female  47.0      1      0        S\n2       2    male  62.0      0      0        Q\n3       3    male  27.0      0      0        S\n4       3  female  22.0      1      1        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**Encoding Sex, Embarked Columns**\n\nWe need to encode Sex and Embarked columns as they are in string form.","metadata":{}},{"cell_type":"code","source":"encoded_train = pd.get_dummies(X_train[['Sex', 'Embarked']], dtype=float)\nencoded_test = pd.get_dummies(X_test[['Sex', 'Embarked']], dtype=float)\nX_train1 = pd.concat([X_train, encoded_train],axis=1)\nX_train1 = X_train1.drop(labels = [\"Sex\", \"Embarked\"], axis=1)\nX_test1 = pd.concat([X_test, encoded_test],axis=1)\nX_test1 = X_test1.drop(labels = [\"Sex\", \"Embarked\"], axis=1)\nX_test1","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.587276Z","iopub.execute_input":"2023-10-26T21:34:31.587777Z","iopub.status.idle":"2023-10-26T21:34:31.630452Z","shell.execute_reply.started":"2023-10-26T21:34:31.587736Z","shell.execute_reply":"2023-10-26T21:34:31.629226Z"},"trusted":true},"execution_count":356,"outputs":[{"execution_count":356,"output_type":"execute_result","data":{"text/plain":"     Pclass       Age  SibSp  Parch  Sex_female  Sex_male  Embarked_C  \\\n0         3  34.50000      0      0         0.0       1.0         0.0   \n1         3  47.00000      1      0         1.0       0.0         0.0   \n2         2  62.00000      0      0         0.0       1.0         0.0   \n3         3  27.00000      0      0         0.0       1.0         0.0   \n4         3  22.00000      1      1         1.0       0.0         0.0   \n..      ...       ...    ...    ...         ...       ...         ...   \n413       3  30.27259      0      0         0.0       1.0         0.0   \n414       1  39.00000      0      0         1.0       0.0         1.0   \n415       3  38.50000      0      0         0.0       1.0         0.0   \n416       3  30.27259      0      0         0.0       1.0         0.0   \n417       3  30.27259      1      1         0.0       1.0         1.0   \n\n     Embarked_Q  Embarked_S  \n0           1.0         0.0  \n1           0.0         1.0  \n2           1.0         0.0  \n3           0.0         1.0  \n4           0.0         1.0  \n..          ...         ...  \n413         0.0         1.0  \n414         0.0         0.0  \n415         0.0         1.0  \n416         0.0         1.0  \n417         0.0         0.0  \n\n[418 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Sex_female</th>\n      <th>Sex_male</th>\n      <th>Embarked_C</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>34.50000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>47.00000</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>62.00000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>27.00000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>22.00000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>3</td>\n      <td>30.27259</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1</td>\n      <td>39.00000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>3</td>\n      <td>38.50000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>3</td>\n      <td>30.27259</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>3</td>\n      <td>30.27259</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train1)\nX_test_scaled = scaler.transform(X_test1)\n\nmlp = MLPClassifier(hidden_layer_sizes=(100,),  # You can specify more layers and nodes like (100, 50, 25)\n                    activation='logistic',\n                    solver='lbfgs',\n                    max_iter=10000,\n                    random_state=42)\n\n\nmlp.fit(X_train_scaled, y_train)\n\n\ny_pred_train = mlp.predict(X_train_scaled)\naccuracy_train = accuracy_score(y_train, y_pred_train)\nprint(f'Accuracy on training set: {accuracy_train}')\n\n\ny_pred_test = mlp.predict(X_test_scaled)\n#print(\"Predictions on test set:\", y_pred_test)\n\n\noutput = pd.DataFrame({\"PassengerId\": test_passengerid, \"Survived\": y_pred_test})\noutput.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2023-10-26T21:34:31.632055Z","iopub.execute_input":"2023-10-26T21:34:31.632388Z","iopub.status.idle":"2023-10-26T21:34:45.512352Z","shell.execute_reply.started":"2023-10-26T21:34:31.632360Z","shell.execute_reply":"2023-10-26T21:34:45.511091Z"},"trusted":true},"execution_count":357,"outputs":[{"name":"stdout","text":"Accuracy on training set: 0.9349046015712682\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Models and Their Test Accuracy** #","metadata":{}},{"cell_type":"markdown","source":"- Logistic Regression(max_iter = 1000) -- 76.32%\n- Naive Bayes -- 72.22%\n- Random Forest (n_estimators = 200, max depth = 5) -- 78.23% (train accuracy: 78%)\n- Random Forest (n_estimators = 100, max depth = 5) -- 77.99% (train accuracy: 85%)\n- **Random Forest (n_estimators = 50, max depth = 5) -- 78.47% (train accuracy: 80%)**\n- Random Forest (n_estimators = 25, max depth = 5) -- 78.47% (train accuracy: 76%)\n- Random Forest (n_estimators = 10, max depth = 5) -- 77.51(train accuracy: 82%)\n\n- Random Forest (n_estimators = 50, max depth = 10) -- 76.79%(train accuracy: 79%)\n- Random Forest (n_estimators = 5, max depth = 5) -- 76.56 (train accuracy: 83%)\n\n- Random Forest (n_estimators = 50, max depth = 3) -- 77.99%(train accuracy: 85%)\n- Random Forest (n_estimators = 50, max depth = 1) -- 77.27%(train accuracy: 72%)\n\n- Neural Network(hidden_layer_sizes=(100,), activation=sigmoid, solver=lbfgs, max_iter=10000) -- 70.57% (train accuracy: 93%)\n\n","metadata":{}},{"cell_type":"markdown","source":"# **Improving Accuracy** #","metadata":{}},{"cell_type":"markdown","source":"What else could I do to improve accuracy?\n- Change Features -- maybe create more features during feature engineering phase. For example, class * fare or class * age.\n- use regularization techniques / Laplace smoothing to prevent overfitting\n- use cross validation / automate tuning hyperparameters instead of manually running each trial","metadata":{}},{"cell_type":"markdown","source":"# **Conclusion** #","metadata":{}},{"cell_type":"markdown","source":"Overall, here are features of people that were more likely to survive the Titanic shipwreck:\n- ticket class (first class = more likely to survive)\n- women\n- children\n- how many family members you had (1-3 = more likely to survive)\n- if you had a cabin, the letter of cabin you were in\n- whether you were embarked from Cherbourg or not","metadata":{}},{"cell_type":"markdown","source":"# **Thank you for reading!**","metadata":{}}]}
